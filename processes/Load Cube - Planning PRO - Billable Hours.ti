#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

#GENERALCOMMENT # Process Name: Load Cube - planning PRO - Billable Hours # 
#GENERALCOMMENT # This process takes the billable hours for the ACS group and puts them into the planning PRO cube#

#DATASOURCECOMMENT # Target cube view: planning PRO -> Actuals #
#DATASOURCECOMMENT # Parameters (all are required): #
#DATASOURCECOMMENT # 	pQuarter	Quarter to load #

#LASTCHANGE # NEW - v1.0 - 2020/11/20 - SH #

#LASTCHANGE # UPD - v1.1 2021/02/02 - SH #
#LASTCHANGE # UPD - Expanded Filters for Budget Billable Type and updated Cell Increment #

#------------------------------------------------------------------------------
#PROLOGCOMMENT # Log the Process Run #
#------------------------------------------------------------------------------
IF (pQuarter @= '');
	pQuarter = CellGetS('Global Parameters', 'Current Planning Quarter','Value String');
ENDIF;


sProcessName = GetProcessName ( ) ;
sTimeStamp = TIMST ( NOW, '\Y-\m-\d(\h\i\s)' ) ;
sTM1User = TM1User ( ) ;
IF ( DIMIX ( '}Clients', sTM1User ) <> 0 ) ;
	sTM1User = Attrs ( '}Clients', sTM1User, '}TM1_DefaultDisplayValue' ) 
		| '=' | Attrs ( '}Clients', sTM1User, 'Name' ) ;
ENDIF ;
IF ( sTM1User @= '=' ) ;
	sTM1User = TM1User ( ) ;
ENDIF ;

NumericGlobalVariable ( 'PrologMinorErrorCount' ) ;
NumericGlobalVariable ( 'MetadataMinorErrorCount' ) ;
NumericGlobalVariable ( 'DataMinorErrorCount' ) ;
StringGlobalVariable ( 'gMarketArea' ) ;

CellPutS ( sTimeStamp, 'Doc_TI Processes', sProcessName, 'Start Time' ) ;
CellPutS ( sTM1User, 'Doc_TI Processes', sProcessName, 'Run By' ) ;
CellPutS ( 'pQuarter=' | pQuarter, 'Doc_TI Processes', sProcessName, 'Parameter01' ) ;

sMsg = '' ;
sLoadMethod = '' ;


### ALWAYS INCLUDE THE FOLLOWING VARIABLES. ###
#nSourceRecCnt = 0 ;
#nOutputRecCnt = 0 ;
#nSkipRecCnt = 0 ;



#------------------------------------------------------------------------------------------#
#PROLOGCOMMENT # Establish process-level variables. #
#------------------------------------------------------------------------------------------#

sTargetViewName = sProcessName | '_Target_' | sTimeStamp ;
sTargetSubsetName = sTargetViewName ;
#Market Area
sTargetSubsetNameMA = sTargetViewName | 'MA' ;
#Delivery Type Subset
sTargetSubsetNameDT = sTargetViewName | 'DT' ;
sTargetSubsetNamePMBU = sTargetViewName | 'PMBU' ;
sZeroLevel = '#0' ;
sTargetCube = 'planning PRO' ;
sQuarter = 'Fiscal Quarter';
sSourceScenario = 'Actuals' ;
#sSourceScenario = 'etest' ;
#-----------------------------------------------------------------------#
#PROLOGCOMMENT # Validate parameters. #
#-----------------------------------------------------------------------#

#IF ( DIMIX ( sQuarter, pQuarter ) = 0 ) ;
#	sMsg = sMsg | 'Invalid Quarter parameter: ' | pQuarter | '.  ' ;
#	PrologMinorErrorCount = PrologMinorErrorCount + 1 ;
#ENDIF ;

#IF ( sMsg @<> '' ) ;
#	ProcessBreak ;
#ENDIF ;

##IF ( ELLEV ( sQuarter, pQuarter ) <> 2 ) ;
##	sMsg = sMsg | 'Quarter parameter is not at Quarter level: ' | pQuarter | '.  ' ;
##	PrologMinorErrorCount = PrologMinorErrorCount + 1 ;
##ENDIF ;

#PROLOGCOMMENT # Build subset #


#Create Subset for Goverment, Commercial, and Budget Billable Type (Delivery Type)#
SubsetDestroy ('Market Segment', sTargetSubsetName);
SubsetCreate('Market Segment', sTargetSubsetName);
SUBSETELEMENTINSERT('Market Segment',sTargetSubsetName, 'COMMERCIAL', 1);
SUBSETELEMENTINSERT('Market Segment',sTargetSubsetName, 'GOVERNMENT', 1);

SubsetDestroy ('Market Area', sTargetSubsetNameMA);
SubsetCreate('Market Area', sTargetSubsetNameMA);
SUBSETELEMENTINSERT('Market Area',sTargetSubsetNameMA, 'US (MA)', 1);
SUBSETELEMENTINSERT('Market Area',sTargetSubsetNameMA, 'ANZ (MA)', 1);
SUBSETELEMENTINSERT('Market Area',sTargetSubsetNameMA, 'GER (MA)', 1);
SUBSETELEMENTINSERT('Market Area',sTargetSubsetNameMA, 'JPN (MA)', 1);

SubsetDestroy ('Delivery Type', sTargetSubsetNameDT);
SubsetCreate('Delivery Type', sTargetSubsetNameDT);
SUBSETELEMENTINSERT('Delivery Type',sTargetSubsetNameDT, 'Fixed Fee', 1);
SUBSETELEMENTINSERT('Delivery Type',sTargetSubsetNameDT, 'Milestone', 1);
SUBSETELEMENTINSERT('Delivery Type',sTargetSubsetNameDT, 'LFS', 1);
SUBSETELEMENTINSERT('Delivery Type',sTargetSubsetNameDT, 'Ratable', 1);
SUBSETELEMENTINSERT('Delivery Type',sTargetSubsetNameDT, 'T&M', 1);

SubsetDestroy ('PMBU', sTargetSubsetNamePMBU);
SubsetCreate('PMBU', sTargetSubsetNamePMBU);
SUBSETELEMENTINSERT('PMBU',sTargetSubsetNamePMBU, '12800 - Platform and Other', 1);
SUBSETELEMENTINSERT('PMBU',sTargetSubsetNamePMBU, '14400 - Adobe Sign', 1);


#PROLOGCOMMENT # Build source view. #

ExecuteProcess ( 'sys_Create View', 'pCubeName', sTargetCube, 'pViewName', sTargetViewName 
	, 'pElement1', '{' | sTargetSubsetNameDT 
	, 'pElement2', 'USD' 
	, 'pElement3', sSourceScenario
	, 'pElement4', sZeroLevel
	, 'pElement5', '{' | sTargetSubsetNamePMBU 
	, 'pElement6', 'Standard Services' 
	, 'pElement7', 'PRO' 
	, 'pElement8', '{' | sTargetSubsetName 
	, 'pElement9', '{' | sTargetSubsetNameMA
	, 'pElement10', pQuarter
	, 'pElement11', 'Billable Hours'
) ;


#IF ( nRV <> ProcessExitNormal ( ) ) ;
#	sMsg = 'Process: sys_Create View for Source View failed with Return Value: ' | NumberToString ( nRV ) ;
#	PrologMinorErrorCount = PrologMinorErrorCount + 1 ;
#	ProcessBreak ;
#ENDIF ;

#ViewExtractSkipCalcsSet ( sSourceCube, sSourceViewName, 0 ) ;
#ViewExtractSkipRuleValuesSet ( sSourceCube, sSourceViewName, 0 ) ;
#ViewExtractSkipZeroesSet ( sSourceCube, sSourceViewName, 1 ) ;

ViewZeroOut('planning PRO', sTargetViewName);

OldCubeLogChanges = CUBEGETLOGCHANGES ( sTargetCube ) ;
CUBESETLOGCHANGES ( sTargetCube, 0 ) ;
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

IF (vGeo @= 'Americas');
	cMarketArea = 'US (MA)';
ENDIF;

IF (vGeo @= 'APAC');
	cMarketArea = 'ANZ (MA)';
ENDIF;

IF (vGeo @= 'EMEA');
	cMarketArea = 'GER (MA)';
ENDIF;

IF (vGeo @= 'JAPAN');
	cMarketArea = 'JPN (MA)';
ENDIF;

cDeliveryType = vBillableType;

IF (vBillableType @= 'Fixed Fee');
	cDeliveryType = 'Milestone';
ENDIF;

IF (vBillableType @= 'Deliverable Acceptance');
	cDeliveryType = 'Fixed Fee';
ENDIF;

cDeliveryPersonnel = vTimecardResourceType;

IF (vTimecardResourceType @= 'On Shore');
	cDeliveryPersonnel = 'Onshore';
ENDIF;

vMarketSegment = UPPER(vMarketSegment);

IF (SCAN('GOVERNMENT', vMarketSegment) <> 0);
	cMarketSegment = 'GOVERNMENT';
ENDIF;

IF (SCAN('COMMERCIAL', vMarketSegment) <> 0);
	cMarketSegment = 'COMMERCIAL';
ENDIF;    

cYear = SUBST(pQuarter, 1, 4);
cQuarter = SUBST(pQuarter,6,2);
cFiscalQuarter = cQuarter | ' ' | cYear;

### Cell Increment for Sign####
IF (vBudgetOverrideProjectPractice @= 'Adobe Sign');

  CellIncrementN(vValue, 
  'planning PRO', 
  'Subscription',
  'USD',
  sSourceScenario,
  cDeliveryPersonnel,
  '14400 - Adobe Sign',
  'Sign Subscription',
  'SSV',
  cMarketSegment,
  cMarketArea,
  cFiscalQuarter,
  'Billable Hours'
  );
ENDIF;

IF (cDeliveryPersonnel @= '');
	ITEMSKIP;
ENDIF;

### Cell Increment for DX####

IF (vAssignmentBillable @= '1' & (vBudgetOverrideProjectPractice @<> 'Acrobat' % vBudgetOverrideProjectPractice @<> 'Adobe Sign' % vBudgetOverrideProjectPractice @<> 'DMe' % vBudgetOverrideProjectPractice @<> 'Marketo Premier Support' % vBudgetOverrideProjectPractice @<> 'PREMIER SUPPORT') );

  CellIncrementN(vValue, 
  'planning PRO', 
  cDeliveryType,
  'USD',
  sSourceScenario,
  cDeliveryPersonnel,
  '12800 - Platform and Other',
  'Standard Services',
  'PRO',
  cMarketSegment,
  cMarketArea,
  cFiscalQuarter,
  'Billable Hours'
  ); 
ENDIF;


#TEXTOUTPUT('\\sjshare\tm1share\shoopes\marketsegment-new.csv',vGeo, pQuarter, vBillableType, vTimecardResourceType, vMarketSegment, NUMBERTOSTRING(vValue), sSourceScenario, cDeliveryPersonnel, cMarketSegment, cMarketArea, cFiscalQuarter);
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

	#EPILOGCOMMENT # Delete target cube view. #
ExecuteProcess ( 'Sys_Delete View'
		, 'pCubeName', sTargetCube 
		, 'pViewName', sTargetViewName 
	) ;

#Delete Subsets when complete#

SubsetDestroy ('Market Segment', sTargetSubsetName);
SubsetDestroy ('Market Area', sTargetSubsetNameMA);
SubsetDestroy ('PMBU', sTargetSubsetNamePMBU);

	#EPILOGCOMMENT # Restore cube logging. #
	CUBESETLOGCHANGES ( sTargetCube, OldCubeLogChanges ) ;


#----------------------------------------------------------------------------------------------------------------------
#EPILOGCOMMENT # Log the Process Run Complete
#----------------------------------------------------------------------------------------------------------------------
#nErrorCount = PrologMinorErrorCount + MetaDataMinorErrorCount + DataMinorErrorCount ;
#CellPutN ( nErrorCount, 'Doc_TI Processes', sProcessName, 'Error Count' ) ;
#CellPutN ( nSourceRecCnt, 'Doc_TI Processes', sProcessName, 'Source Record Count' ) ;
#CellPutN ( nOutputRecCnt, 'Doc_TI Processes', sProcessName, 'Output Record Count' ) ;
#CellPutN ( nSkipRecCnt, 'Doc_TI Processes', sProcessName, 'Skip Record Count' ) ;
sTimeStamp = TimSt ( NOW, '\Y-\m-\d(\h\i\s)' ) ;
CellPutS ( sTimeStamp, 'Doc_TI Processes', sProcessName, 'End Time' ) ;


#EPILOGCOMMENT # Log error and Quit if parameter validation fails. #
IF ( sMsg @<> '' ) ;
	LogOutput ( 'ERROR', sMsg ) ;
	ProcessQuit ;
ENDIF ;
#endregion